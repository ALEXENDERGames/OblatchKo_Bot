import logging
import random
import requests
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import datetime
from aiogram.types import BotCommand
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '8192410051:AAEz3lkLHgSGe0fEP5D-3JfT_wTQleQtZb8'
WEATHER_API_KEY = '1671cc601632c69396322d9c9849c65d'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class GameStates(StatesGroup):
    playing = State()



# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç—ã
WEATHER_EMOJI = [
    "‚ùÑÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∫—Ä—ã–ª—Å—è –∏–Ω–µ–µ–º! –°–æ–≥—Ä–µ–π –µ–≥–æ –≥–æ—Ä—è—á–∏–º —á–∞–µ–º!",
    "üßä –õ–µ–¥—è–Ω–∞—è –±—É—Ä—è –Ω–∞–∫—Ä—ã–ª–∞ –∞–∫–∫–∞—É–Ω—Ç! –°–ø–∞—Å–∞–π—Å—è –º–µ–º–∞–º–∏!",
    "üå® –ê–∫–∫–∞—É–Ω—Ç –≤ —Å–Ω–µ–∂–Ω–æ–º –ø–ª–µ–Ω—É! –†–∞—Å—Ç–æ–ø–∏ –ª–µ–¥ —Å–º–µ—Ö–æ–º!",
    "‚õÑÔ∏è –°–Ω–µ–≥–æ–≤–∏–∫–∏ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç! –í—ã–∑–≤–æ–ª—è–π —Å—Ä–æ—á–Ω–æ!",
    "üå¨ –õ–µ–¥—è–Ω–æ–π –≤–µ—Ç–µ—Ä —Å –°–µ–≤–µ—Ä–∞! –í–∫–ª—é—á–∏ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å!"
]

THAW_PHRASES = [
    "üî• –í—ã —Å–ø–∞—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∫–æ—Ç–∏–∫–∞–º–∏! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ +{}¬∞C!",
    "‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏ –ø—Ä–æ–≥—Ä–µ–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É! +{}¬∞C!",
    "üêß –ü–∏–Ω–≥–≤–∏–Ω—ã-—Å–ø–∞—Å–∞—Ç–µ–ª–∏ –ø—Ä–∏–±—ã–ª–∏! +{}¬∞C!",
    "üéÆ –ì–µ–π–º–µ—Ä—Å–∫–∏–π —á–∏—Ö —Ä–∞—Å—Ç–æ–ø–∏–ª –ª–µ–¥! +{}¬∞C!",
    "üíª –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≥—Ä–µ–ª! +{}¬∞C!"
]

FACT_EMOJI = ["üå™", "üå°", "üåÄ", "‚ùÑÔ∏è", "üî•", "üíß", "üå§", "‚õà"]
WEATHER_FACTS = [
    "–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ –î–æ–ª–∏–Ω–µ –°–º–µ—Ä—Ç–∏: +56.7¬∞C!",
    "–°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è –≥—Ä–∞–¥–∏–Ω–∞ –≤–µ—Å–∏–ª–∞ 1 –∫–≥ –∏ —É–±–∏–ª–∞ 92 —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ë–∞–Ω–≥–ª–∞–¥–µ—à –≤ 1986",
    "–ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç –Ω–∞–≥—Ä–µ–≤–∞—Ç—å –≤–æ–∑–¥—É—Ö –¥–æ 30,000¬∞C ‚Äî –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞",
    "–í –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–µ –µ—Å—Ç—å –º–µ—Å—Ç–∞, –≥–¥–µ –Ω–µ –±—ã–ª–æ –¥–æ–∂–¥—è 2 –º–∏–ª–ª–∏–æ–Ω–∞ –ª–µ—Ç",
    "–ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –Ω–∞ –ó–µ–º–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç 100 —É–¥–∞—Ä–æ–≤ –º–æ–ª–Ω–∏–π"
]


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞"),
        types.KeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å"),
        types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
        types.KeyboardButton(text="‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ê–Ω–¥—Ä–µ—è"),
        types.KeyboardButton(text="üåç –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç")
    )
    builder.adjust(3, 2, 1)
    return builder.as_markup(resize_keyboard=True)


def weather_menu():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üìç –ò—Ä–∫—É—Ç—Å–∫", callback_data="city_–ò—Ä–∫—É—Ç—Å–∫"),
        types.InlineKeyboardButton(text="üìç –ú–æ—Å–∫–≤–∞", callback_data="city_–ú–æ—Å–∫–≤–∞"),
        types.InlineKeyboardButton(text="üìç –°–ü–±", callback_data="city_–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        types.InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="other_city")
    )
    builder.adjust(2)
    return builder.as_markup()


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            'score': 0,
            'games_played': 0,
            'freeze_attempts': 0,
            'facts_viewed': 0,
            'last_fact': None,
            'last_freeze': None
        }

    await message.answer(
        "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WeatherWizard!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –∏ —Ä–∞–∑–≤–ª–µ–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏–≥—Ä–æ–π!",
        reply_markup=main_menu()
    )


@dp.message(F.text == "üåç –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç")
async def weather_fact(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await start(message)
        return

    last_fact = user_data[user_id].get('last_fact')
    available_facts = [f for f in WEATHER_FACTS if f != last_fact] or WEATHER_FACTS

    selected_fact = random.choice(available_facts)
    user_data[user_id]['facts_viewed'] += 1
    user_data[user_id]['last_fact'] = selected_fact

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üé≤ –ï—â—ë —Ñ–∞–∫—Ç", callback_data="another_fact"))

    await message.answer(
        f"{random.choice(FACT_EMOJI)} <b>–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?</b>\n\n"
        f"{selected_fact}\n\n"
        f"üåÄ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {user_data[user_id]['facts_viewed']}",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "another_fact")
async def another_fact(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    last_fact = user_data[user_id].get('last_fact')
    available_facts = [f for f in WEATHER_FACTS if f != last_fact] or WEATHER_FACTS

    selected_fact = random.choice(available_facts)
    user_data[user_id]['facts_viewed'] += 1
    user_data[user_id]['last_fact'] = selected_fact

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üé≤ –ï—â—ë —Ñ–∞–∫—Ç", callback_data="another_fact"))

    await callback.message.edit_text(
        f"{random.choice(FACT_EMOJI)} <b>–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?</b>\n\n"
        f"{selected_fact}\n\n"
        f"üåÄ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {user_data[user_id]['facts_viewed']}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@dp.message(F.text == "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ê–Ω–¥—Ä–µ—è")
async def freeze_andrew(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await start(message)
        return

    target_user = "@AndrewBezotchestvo"
    last_freeze = user_data[user_id].get('last_freeze')

    if last_freeze and (datetime.now() - last_freeze).seconds < 60:
        await message.answer("üõë –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É")
        return

    user_data[user_id]['freeze_attempts'] += 1
    user_data[user_id]['last_freeze'] = datetime.now()

    freeze_msg = random.choice(WEATHER_EMOJI)
    thaw_temp = random.randint(1, 15)
    thaw_msg = random.choice(THAW_PHRASES).format(thaw_temp)

    response = (
        f"{freeze_msg}\n\n"
        f"{target_user} {thaw_msg}\n"
        f"üåÄ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–º–æ—Ä–æ–∑–∫–∏: {user_data[user_id]['freeze_attempts']}"
    )

    await message.answer(response)


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await start(message)
        return

    user = user_data[user_id]
    stats_msg = (
        f"üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üèÜ –û—á–∫–æ–≤: {user['score']}\n"
        f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user['games_played']}\n"
        f"‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–æ–∫ –ê–Ω–¥—Ä–µ—è: {user['freeze_attempts']}\n"
        f"üåê –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Ñ–∞–∫—Ç–æ–≤: {user['facts_viewed']}"
    )

    await message.answer(stats_msg)


@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    await message.answer(
        "üåÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑\n"
        "üéÆ –ò–≥—Ä–∞—Ç—å - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É'\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>"
    )


@dp.message(F.text == "üå§ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")
async def weather_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=weather_menu())


@dp.callback_query(F.data.startswith("city_"))
async def city_selected(callback: types.CallbackQuery):
    city = callback.data.split("_")[1]
    await get_and_send_weather(callback.message, city)
    await callback.answer()


async def get_and_send_weather(message: types.Message, city: str):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric"
        response = requests.get(url).json()

        if response['cod'] != 200:
            raise Exception()

        weather_emoji = WEATHER_EMOJI[0]
        temp = response['main']['temp']

        await message.answer(
            f"{weather_emoji} <b>–ü–æ–≥–æ–¥–∞ –≤ {city}:</b>\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {response['main']['humidity']}%\n"
            f"üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: {response['main']['pressure']} –≥–ü–∞\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {response['wind']['speed']} –º/—Å"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")


@dp.message(F.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
async def start_game(message: types.Message, state: FSMContext):
    cities = ['–ú–æ—Å–∫–≤–∞', '–ò—Ä–∫—É—Ç—Å–∫', '–°–æ—á–∏', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥']
    target_city = random.choice(cities)

    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={target_city}&appid={WEATHER_API_KEY}&units=metric"
        response = requests.get(url).json()

        if response['cod'] != 200:
            raise Exception()

        await state.update_data(
            target_temp=round(response['main']['temp']),
            attempts=3,
            city=target_city
        )

        await message.answer(
            f"üéÆ <b>–£–≥–∞–¥–∞–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É!</b>\n"
            f"–í –≥–æ—Ä–æ–¥–µ {target_city} —Å–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞...\n"
            f"–£ —Ç–µ–±—è 3 –ø–æ–ø—ã—Ç–∫–∏! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:"
        )
        await state.set_state(GameStates.playing)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
        await message.answer("‚ö†Ô∏è –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


@dp.message(GameStates.playing)
async def game_process(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_guess = int(message.text)

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_again"))

        if user_guess == data['target_temp']:
            user_data[message.from_user.id]['score'] += 10
            await message.answer(
                f"üéâ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {data['city']}: {data['target_temp']}¬∞C\n"
                f"+10 –æ—á–∫–æ–≤! –¢–≤–æ–π —Å—á–µ—Ç: {user_data[message.from_user.id]['score']}",
                reply_markup=builder.as_markup()
            )
            await state.clear()
            return

        data['attempts'] -= 1
        await state.update_data(attempts=data['attempts'])

        if data['attempts'] > 0:
            hint = "üîº –¢–µ–ø–ª–µ–µ!" if user_guess < data['target_temp'] else "üîΩ –•–æ–ª–æ–¥–Ω–µ–µ!"
            await message.answer(
                f"{hint}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {data['attempts']}"
            )
        else:
            user_data[message.from_user.id]['score'] -= 5
            await message.answer(
                f"üí• <b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b>\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data['target_temp']}¬∞C\n"
                f"-5 –æ—á–∫–æ–≤. –¢–≤–æ–π —Å—á–µ—Ç: {user_data[message.from_user.id]['score']}",
                reply_markup=builder.as_markup()
            )
            await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        await state.clear()


@dp.callback_query(F.data == "play_again")
async def play_again(callback: types.CallbackQuery, state: FSMContext):
    await start_game(callback.message, state)
    await callback.answer()
# –ó–∞–ø—É—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
async def on_startup():
    await set_bot_commands()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


async def on_shutdown():
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    await bot.session.close()


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
